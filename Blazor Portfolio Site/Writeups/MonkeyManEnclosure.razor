@page "/projects/monkeymanenclosure"
@using Blazor_Portfolio_Site.Components
@inherits PageBase

<Animate Auto Animation="Animations.FadeIn">
	<Container Padding="Padding.Is2">
		<BackToProjectsButton />

		<Card Margin="Margin.Is2">
			<Container>
				@*Header*@
				<Container Width="Width.Is100" TextAlignment="TextAlignment.Center" Padding="Padding.Is2">
					<Image src="portfolioimages/monkeymanenclosure/header.jpg" Width="Width.Is50" Padding="Padding.Is2" />
					<Heading Size="HeadingSize.Is2">
						Monkey Man Enclosure
					</Heading>
					<Heading Size="HeadingSize.Is5">
						Game About Protecting a Man Asleep in a Monkey Enclosure
					</Heading>
				</Container>

				<Divider />

				@*About*@
				<Heading Size="HeadingSize.Is3" Padding="Padding.Is2" TextAlignment="TextAlignment.Center">About</Heading>
				<Row Margin="Margin.Is2">
					<Column ColumnSize="ColumnSize.Is8">
						<Paragraph>
							An action arcade game about a man who has sleep-walked into a monkey enclosure (wearing a monkey costume). The junior zookeeper must keep the man safe until he wakes up.
						</Paragraph>
						<Paragraph>
							I organized a team of 5 to develop this game for a 10-day game jam. The team included: a 3D artist, a UI artist, a composer, and two programmers. Our game ranked 3rd out of 22 entries!
						</Paragraph>
						<Column ColumnSize="ColumnSize.Is8">
							<Figure>
								<FigureImage Source="portfolioimages/monkeymanenclosure/gif1.gif" Rounded />
							</Figure>
						</Column>
					</Column>
					<Column ColumnSize="ColumnSize.Is4">
						<Text>Source: <Text TextWeight="TextWeight.Bold">Open Source</Text></Text> <br />
						<Text>Date: <Text TextWeight="TextWeight.Bold">March 2021</Text></Text> <br />
						<Text>Team Size: <Text TextWeight="TextWeight.Bold">5</Text></Text> <br />
						<Text>Languages and Technologies: <Text TextWeight="TextWeight.Bold">C#, Unity, Visual Studio, Git</Text></Text> <br />
						<Text>Platforms: <Text TextWeight="TextWeight.Bold">Windows, Mac, Linux, WebGL</Text></Text> <br />

						<Link To="https://bagelo-masterson.itch.io/monkey-man-enclosure" Target="Target.Blank">
						<Div class="clicky-card-link">
							<Card Margin="Margin.Is2" class="outlined-card">
								<CardBody>
									<Row>
										<Column ColumnSize="ColumnSize.Is2">
											<img style="filter:invert(@GlobalVariables.DarkModeColorInvertPercent)" src="icons/itchio.png" height="30px" width="30px" />
										</Column>
										<Column ColumnSize="ColumnSize.Is10">
											<Text TextWeight="TextWeight.Bold" VerticalAlignment="VerticalAlignment.Middle">Itch.io!</Text>
										</Column>
									</Row>
								</CardBody>
							</Card>
						</Div>
						</Link>
						<Link To="https://github.com/BagelMaster5000/Monkey-Man-Enclosure" Target="Target.Blank">
						<Div class="clicky-card-link">
							<Card Margin="Margin.Is2" class="outlined-card">
								<CardBody>
									<Row>
										<Column ColumnSize="ColumnSize.Is2">
											<img style="filter:invert(@GlobalVariables.DarkModeColorInvertPercent)" src="icons/github.png" height="30px" width="30px" />
										</Column>
										<Column ColumnSize="ColumnSize.Is10">
											<Text TextWeight="TextWeight.Bold" VerticalAlignment="VerticalAlignment.Middle">Github!</Text>
										</Column>
									</Row>
								</CardBody>
							</Card>
						</Div>
						</Link>
					</Column>
				</Row>

				<Divider />

				@*Gallery*@
				<Heading Size="HeadingSize.Is3" Padding="Padding.Is2" TextAlignment="TextAlignment.Center">Gallery</Heading>
				<Row Margin="Margin.Is2">
					<Column ColumnSize="ColumnSize.IsHalf" Padding="Padding.Is2">
						<Div class="clicky-card gallery-item" @onclick="() => ShowGalleryImageCloseup(galleryImageSources[0])" Padding="Padding.Is2">
							<Image Source=@galleryImageSources[0] Width="Width.Is100" />
							<Icon IconSize="IconSize.x3" Name="IconName.SearchPlus" />
						</Div>
					</Column>
					<Column ColumnSize="ColumnSize.IsHalf" Padding="Padding.Is2">
						<Div class="clicky-card gallery-item" @onclick="() => ShowGalleryImageCloseup(galleryImageSources[1])" Padding="Padding.Is2">
							<Image Source=@galleryImageSources[1] Width="Width.Is100" />
							<Icon IconSize="IconSize.x3" Name="IconName.SearchPlus" />
						</Div>
					</Column>
				</Row>

				<Divider />

				@*Object Pooling*@
				<Heading Size="HeadingSize.Is3" Padding="Padding.Is2" TextAlignment="TextAlignment.Center">Object Pooling</Heading>
				<Row Margin="Margin.Is2">
					<Paragraph>
						To minimize garbage creation and collection while playing (to avoid dropping frames due to de-allocating memory), throwable objects were pooled rather than being created and destroyed. We chose an arbitrary pool size of 6 bananas, 6 bricks, and 30 food pellets.
					</Paragraph>
					<Container TextAlignment="TextAlignment.Center" Padding="Padding.Is2" Width="Width.Is75">
						<Figure>
							<FigureImage Source="portfolioimages/monkeymanenclosure/objectpooling.gif" Rounded />
							<FigureCaption>
								To mask the re-use of throwable objects, the objects subtly scale out of existence shortly after colliding with the ground.
							</FigureCaption>
						</Figure>
					</Container>
					<Row>
						<Column ColumnSize="ColumnSize.Is4" TextAlignment="TextAlignment.Center">
							<Figure>
								<FigureImage Source="portfolioimages/monkeymanenclosure/objectpoolingengine1.jpg" Rounded />
							</Figure>
							<FigureCaption>
								Objects included in the pool were set in the inspector via an exposed array. So, it was trivial to add or remove objects from the pool.
							</FigureCaption>
						</Column>
						<Column ColumnSize="ColumnSize.Is8" TextAlignment="TextAlignment.Center">
							<Figure>
								<FigureImage Source="portfolioimages/monkeymanenclosure/objectpoolingengine2.jpg" Rounded />
								<FigureCaption>
									The throw function for each item iterated through the respective item's object pool. The oldest-accessed object was always the one that was thrown, which minimized the possibility of a player seeing an active item disappear.
								</FigureCaption>
							</Figure>
						</Column>
					</Row>
				</Row>

				<Divider />

				@*Physics-Calculated Throw Arc and AOE Previews*@
				<Heading Size="HeadingSize.Is3" Padding="Padding.Is2" TextAlignment="TextAlignment.Center">Physics-Calculated Throw Arc and AOE Previews</Heading>
				<Row Margin="Margin.Is2">
					<Paragraph>
						Managing the throwable objects was one of my programming responsibilities for this project.
					</Paragraph>
					<Paragraph>
						In the game, the player throws items by clicking on a target location. The game draws a preview arc and a preview area of effect (AOE) circle when preparing to throw an item, and then executes the throw on-click following the expected trajectory. I created two algorithms to draw these preview lines (with a variable amount of points to tune accuracy/performance) using physics and math equations.
					</Paragraph>
					<Container TextAlignment="TextAlignment.Center">
						<Figure Width="Width.Is75">
							<FigureImage Source="portfolioimages/monkeymanenclosure/physics1.jpg" Rounded />
							<FigureCaption>
								Preview throw arc in-game.
							</FigureCaption>
						</Figure>
					</Container>
					<Container TextAlignment="TextAlignment.Center">
						<Figure Width="Width.Is75">
							<FigureImage Source="portfolioimages/monkeymanenclosure/physics3.jpg" Rounded />
							<FigureCaption>
								This method sets the points of a line renderer to form a throw arc with a variable amount of points and a variable amount of air time.
							</FigureCaption>
						</Figure>
					</Container>
					<Container TextAlignment="TextAlignment.Center">
						<Figure Width="Width.Is50">
							<FigureImage Source="portfolioimages/monkeymanenclosure/physics2.jpg" Rounded />
							<FigureCaption>
								This method sets the points of a line renderer to form a circle with a variable amount of points (centered at 0,0).
							</FigureCaption>
						</Figure>
					</Container>
				</Row>

				<Divider />

				@*UML Diagram*@
				<Heading Size="HeadingSize.Is3" Padding="Padding.Is2" TextAlignment="TextAlignment.Center">UML Diagram</Heading>
				<Row Margin="Margin.Is2">
					<Paragraph>
						Before starting to code, my co-programmer and I created a UML diagram to map-out our game systems. We then divided up the scripts to make sure we both had an equal amount of work for the project.
					</Paragraph>
					<Container TextAlignment="TextAlignment.Center">
						<Figure Width="Width.Is100">
							<FigureImage Source="portfolioimages/monkeymanenclosure/uml.png" Rounded />
							<FigureCaption>
								(I was responsible for the red scripts, my co-programmer was responsible for the green)
							</FigureCaption>
						</Figure>
					</Container>
				</Row>

				<Divider />

				@*Project Management*@
				<Heading Size="HeadingSize.Is3" Padding="Padding.Is2" TextAlignment="TextAlignment.Center">Project Management</Heading>
				<Row Margin="Margin.Is2">
					<Paragraph>
						I created a shared spreadsheet to track the assets and tasks for all departments and also regularly checked-in with each team member throughout the duration of the jam. This organization ensured that all team members knew exactly what they were expected to work on at all times and also gave each of them awareness of everyone's progress.
					</Paragraph>
					<Container TextAlignment="TextAlignment.Center">
						<Figure Width="Width.Is100">
							<FigureImage Source="portfolioimages/monkeymanenclosure/assetlist.jpg" Rounded />
						</Figure>
					</Container>
				</Row>

				<Divider />

				@*Bottom Links*@
				<Heading Size="HeadingSize.Is3" Padding="Padding.Is2" TextAlignment="TextAlignment.Center">Check Out the Game!</Heading>
				<Row Margin="Margin.Is2">
					<Column ColumnSize="ColumnSize.IsHalf" Padding="Padding.Is2">
						<Link To="https://bagelo-masterson.itch.io/monkey-man-enclosure" Target="Target.Blank">
						<Div class="clicky-card-link">
							<Card Margin="Margin.Is2" class="outlined-card">
								<CardBody>
									<Row>
										<Column ColumnSize="ColumnSize.Is2">
											<img style="filter:invert(@GlobalVariables.DarkModeColorInvertPercent)" src="icons/itchio.png" height="30px" width="30px" />
										</Column>
										<Column ColumnSize="ColumnSize.Is10">
											<Text TextWeight="TextWeight.Bold" VerticalAlignment="VerticalAlignment.Middle">Itch.io!</Text>
										</Column>
									</Row>
								</CardBody>
							</Card>
						</Div>
						</Link>
					</Column>
					<Column ColumnSize="ColumnSize.IsHalf" Padding="Padding.Is2">
						<Link To="https://github.com/BagelMaster5000/Monkey-Man-Enclosure" Target="Target.Blank">
						<Div class="clicky-card-link">
							<Card Margin="Margin.Is2" class="outlined-card">
								<CardBody>
									<Row>
										<Column ColumnSize="ColumnSize.Is2">
											<img style="filter:invert(@GlobalVariables.DarkModeColorInvertPercent)" src="icons/github.png" height="30px" width="30px" />
										</Column>
										<Column ColumnSize="ColumnSize.Is10">
											<Text TextWeight="TextWeight.Bold" VerticalAlignment="VerticalAlignment.Middle">Github!</Text>
										</Column>
									</Row>
								</CardBody>
							</Card>
						</Div>
						</Link>
					</Column>
				</Row>
			</Container>
		</Card>

		<BackToProjectsButton />
	</Container>
</Animate>


@*Gallery Image Closeup*@
<Modal @bind-Visible="@galleryImageCloseupVisible">
	<ModalContent Size="ModalSize.ExtraLarge">
		<ModalHeader>
			<CloseButton />
		</ModalHeader>
		<ModalBody>
			<Image Source=@galleryImageCloseupSource Width="Width.Is100" />
		</ModalBody>
	</ModalContent>
</Modal>

@code {
	private string[] galleryImageSources = {
		"portfolioimages/monkeymanenclosure/gif2.gif",
		"portfolioimages/monkeymanenclosure/gif3.gif" };

	private bool galleryImageCloseupVisible;
	private string galleryImageCloseupSource = "";
	private void ShowGalleryImageCloseup(string setSource) {
		galleryImageCloseupSource = setSource;
		galleryImageCloseupVisible = true;
	}
}