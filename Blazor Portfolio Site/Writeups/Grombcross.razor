@page "/projects/grombcross"
@using Blazor_Portfolio_Site.Components
@inherits PageBase

<Animate Auto Animation="Animations.FadeIn">
	<Container Padding="Padding.Is2">
		<BackToProjectsButton />

		<Card Margin="Margin.Is2">
			@*Header*@
			<Container Width="Width.Is50" TextAlignment="TextAlignment.Center" Padding="Padding.Is2">
				<Image src="portfolioimages/grombcross/header.png" Width="Width.Is100" Padding="Padding.Is2" />
				<Heading Size="HeadingSize.Is2">
					Grombcross
				</Heading>
				<Heading Size="HeadingSize.Is5">
					Picross Puzzle Game
				</Heading>
			</Container>

			<Divider />

			@*About*@
			<Heading Size="HeadingSize.Is3" Padding="Padding.Is2" TextAlignment="TextAlignment.Center">About</Heading>
			<Row Margin="Margin.Is2">
				<Column ColumnSize="ColumnSize.Is8">
					<Paragraph>
						A picross puzzle game made by myself and several Society of Play members themed around Society of Play original characters and inside jokes.
					</Paragraph>
					<Paragraph>
						I organized a team of 8 to develop a picross puzzle game for a game jam. I worked on this game after work hours during my internship at the time, using the same tech stack and design patterns as my internship project.
					</Paragraph>
					<Column ColumnSize="ColumnSize.Is8">
						<Figure>
							<FigureImage Source="portfolioimages/pizzadeliverybagel/gif1.gif" Rounded />
						</Figure>
					</Column>
				</Column>
				<Column ColumnSize="ColumnSize.Is4">
					<Text>Source: <Text TextWeight="TextWeight.Bold">Open Source</Text></Text> <br />
					<Text>Date: <Text TextWeight="TextWeight.Bold">August 2022</Text></Text> <br />
					<Text>Team Size: <Text TextWeight="TextWeight.Bold">5</Text></Text> <br />
					<Text>Languages and Technologies: <Text TextWeight="TextWeight.Bold">C#, XAML, .NET 6.0, WPF, Visual Studio, Git</Text></Text> <br />
					<Text>Platforms: <Text TextWeight="TextWeight.Bold">Windows</Text></Text> <br />

					<Link To="https://bagelo-masterson.itch.io/grombcross" Target="Target.Blank">
					<Div class="clicky-card-link">
						<Card Margin="Margin.Is2" class="outlined-card">
							<CardBody>
								<Row>
									<Column ColumnSize="ColumnSize.Is2">
										<img style="filter:invert(@GlobalVariables.DarkModeColorInvertPercent)" src="icons/itchio.png" height="30px" width="30px" />
									</Column>
									<Column ColumnSize="ColumnSize.Is10">
										<Text TextWeight="TextWeight.Bold" VerticalAlignment="VerticalAlignment.Middle">Itch.io!</Text>
									</Column>
								</Row>
							</CardBody>
						</Card>
					</Div>
					</Link>
					<Link To="https://github.com/BagelMaster5000/Grombcross" Target="Target.Blank">
					<Div class="clicky-card-link">
						<Card Margin="Margin.Is2" class="outlined-card">
							<CardBody>
								<Row>
									<Column ColumnSize="ColumnSize.Is2">
										<img style="filter:invert(@GlobalVariables.DarkModeColorInvertPercent)" src="icons/github.png" height="30px" width="30px" />
									</Column>
									<Column ColumnSize="ColumnSize.Is10">
										<Text TextWeight="TextWeight.Bold" VerticalAlignment="VerticalAlignment.Middle">Github!</Text>
									</Column>
								</Row>
							</CardBody>
						</Card>
					</Div>
					</Link>
				</Column>
			</Row>

			<Divider />

			@*Gallery*@
			<Heading Size="HeadingSize.Is3" Padding="Padding.Is2" TextAlignment="TextAlignment.Center">Gallery</Heading>
			<Row Margin="Margin.Is2">
				<Column ColumnSize="ColumnSize.IsHalf" Padding="Padding.Is2">
					<Div class="clicky-card gallery-item" @onclick="() => ShowGalleryImageCloseup(galleryImageSources[0])" Padding="Padding.Is2">
						<Image Source=@galleryImageSources[0] Width="Width.Is100" />
						<Icon IconSize="IconSize.x3" Name="IconName.SearchPlus" />
					</Div>
				</Column>
				<Column ColumnSize="ColumnSize.IsHalf" Padding="Padding.Is2">
					<Div class="clicky-card gallery-item" @onclick="() => ShowGalleryImageCloseup(galleryImageSources[1])" Padding="Padding.Is2">
						<Image Source=@galleryImageSources[1] Width="Width.Is100" />
						<Icon IconSize="IconSize.x3" Name="IconName.SearchPlus" />
					</Div>
				</Column>
				<Column ColumnSize="ColumnSize.IsHalf" Padding="Padding.Is2">
					<Div class="clicky-card gallery-item" @onclick="() => ShowGalleryImageCloseup(galleryImageSources[2])" Padding="Padding.Is2">
						<Image Source=@galleryImageSources[2] Width="Width.Is100" />
						<Icon IconSize="IconSize.x3" Name="IconName.SearchPlus" />
					</Div>
				</Column>
			</Row>

			<Divider />

			@*Puzzle Generation System*@
			<Heading Size="HeadingSize.Is3" Padding="Padding.Is2" TextAlignment="TextAlignment.Center">Puzzle Generation System</Heading>
			<Row Margin="Margin.Is2">
				<ListGroup>
					<ListGroupItem>
						1.	Each puzzle is generated from just a pair of bitmap images: one black+white (generation image) and one full-color (completed image).
					</ListGroupItem>
					<ListGroupItem>
						2.	The puzzle generation script parses the filenames of these bitmap images for information—such as puzzle name and id number—and then iterates through the pixels of the black+white generation image to create a 2D boolean array representing the puzzle’s solution state.
					</ListGroupItem>
					<ListGroupItem>
						3.	When a puzzle is selected by the user to play, this 2D boolean array is sent as an argument to the game view to generate a game board with the relevant line hints.
					</ListGroupItem>
				</ListGroup>
				<Paragraph>
					An aspect of the puzzle generation system I’m very proud of is allowing the developer or player to easily add, change, or remove puzzles without touching the codebase. The puzzles are generated at runtime using the .bmp images in the exposed puzzle data folders. Puzzles can be added, changed, or removed by modifying their respective .bmp image pairs (which requires only a basic image editor).
				</Paragraph>
			</Row>

			<Divider />

			@*Save Data as JSON*@
			<Heading Size="HeadingSize.Is3" Padding="Padding.Is2" TextAlignment="TextAlignment.Center">Save Data as JSON</Heading>
			<Row Margin="Margin.Is2">
				<Paragraph>
					The save data is formatted as a dictionary and saved into a json file. The dictionary’s key is the puzzle name (string) and its value is the puzzle’s completion state (boolean).
				</Paragraph>
				<Paragraph>
					The save data is formatted as a dictionary and saved into a json file. The dictionary’s key is the puzzle name (string) and its value is the puzzle’s completion state (boolean).
					<br />
					•	When loading, any puzzle save data found in the json file without a matching puzzle in the puzzle data folder will be ignored.
					<br />
					•	When saving, only the puzzles currently in the puzzle data folder are saved into the json file. So, previously-saved puzzles that are no longer in the game are excluded.
				</Paragraph>
			</Row>

			<Divider />

			@*UML Diagram*@
			<Heading Size="HeadingSize.Is3" Padding="Padding.Is2" TextAlignment="TextAlignment.Center">UML Diagram</Heading>
			<Row Margin="Margin.Is2">
				<Paragraph>
					I created a UML to plan out game systems. This helped a lot!
				</Paragraph>
				<Paragraph>
					I enjoy creating UMLs before starting to code because I’ve found it removes a lot of guess work that would otherwise come with programming a project from scratch and helps keeps scripts focused. I’ve been burned too many times in the past by cowboy coding and then discovering later that my project is unsustainable because of a messy codebase...
				</Paragraph>
				@*				<Column ColumnSize="ColumnSize.IsHalf" Padding="Padding.Is2">
				<Figure>
				<FigureImage Source="portfolioimages/pizzadeliverybagel/terminal.gif" Rounded />
				<FigureCaption TextAlignment="TextAlignment.Center">
				I implemented a terminal for executing debug commands in-game. I utilized a 3rd party terminal because it provided all the utility I needed and saved development time.
				</FigureCaption>
				</Figure>
				</Column>
				<Column ColumnSize="ColumnSize.IsHalf" Padding="Padding.Is2">
				<Figure>
				<FigureImage Source="portfolioimages/pizzadeliverybagel/customeditor.png" Rounded />
				<FigureCaption TextAlignment="TextAlignment.Center">
				I created a basic custom editor for debugging shortcuts.
				</FigureCaption>
				</Figure>
				</Column>*@
			</Row>

			<Divider />

			@*Auto-Resizing Board*@
			<Heading Size="HeadingSize.Is3" Padding="Padding.Is2" TextAlignment="TextAlignment.Center">Auto-Resizing Board</Heading>
			<Row Margin="Margin.Is2">
				<Paragraph>
					Game board auto-sizes to fit the window.
				</Paragraph>
				<Paragraph>
					When the game view is loaded, the game board’s scale is calculated and set based on window height and width. While in-game, the board scale is re-calculated and the board is re-rendered each time the window is resized via a function that listens for the window resized event. 
				</Paragraph>
			</Row>

			<Divider />

			@*Bottom Links*@
			<Heading Size="HeadingSize.Is3" Padding="Padding.Is2" TextAlignment="TextAlignment.Center">Check Out the Game!</Heading>
			<Row Margin="Margin.Is2">
				<Column ColumnSize="ColumnSize.IsHalf" Padding="Padding.Is2">
					<Link To="https://bagelo-masterson.itch.io/grombcross" Target="Target.Blank">
					<Div class="clicky-card-link">
						<Card Margin="Margin.Is2" class="outlined-card">
							<CardBody>
								<Row>
									<Column ColumnSize="ColumnSize.Is2">
										<img style="filter:invert(@GlobalVariables.DarkModeColorInvertPercent)" src="icons/itchio.png" height="30px" width="30px" />
									</Column>
									<Column ColumnSize="ColumnSize.Is10">
										<Text TextWeight="TextWeight.Bold" VerticalAlignment="VerticalAlignment.Middle">Itch.io!</Text>
									</Column>
								</Row>
							</CardBody>
						</Card>
					</Div>
					</Link>
				</Column>
				<Column ColumnSize="ColumnSize.IsHalf" Padding="Padding.Is2">
					<Link To="https://github.com/BagelMaster5000/Grombcross" Target="Target.Blank">
					<Div class="clicky-card-link">
						<Card Margin="Margin.Is2" class="outlined-card">
							<CardBody>
								<Row>
									<Column ColumnSize="ColumnSize.Is2">
										<img style="filter:invert(@GlobalVariables.DarkModeColorInvertPercent)" src="icons/github.png" height="30px" width="30px" />
									</Column>
									<Column ColumnSize="ColumnSize.Is10">
										<Text TextWeight="TextWeight.Bold" VerticalAlignment="VerticalAlignment.Middle">Github!</Text>
									</Column>
								</Row>
							</CardBody>
						</Card>
					</Div>
					</Link>
				</Column>
			</Row>
		</Card>

		<BackToProjectsButton />
	</Container>
</Animate>


@*Gallery Image Closeup*@
<Modal @bind-Visible="@galleryImageCloseupVisible">
	<ModalContent Size="ModalSize.ExtraLarge">
		<ModalHeader>
			<CloseButton />
		</ModalHeader>
		<ModalBody>
			<Image Source=@galleryImageCloseupSource Width="Width.Is100" />
		</ModalBody>
	</ModalContent>
</Modal>

@code {
	private string[] galleryImageSources = {
		"portfolioimages/pizzadeliverybagel/gif1.gif",
		"portfolioimages/pizzadeliverybagel/gif2.gif",
		"portfolioimages/pizzadeliverybagel/gif3.gif" };

	private bool galleryImageCloseupVisible;
	private string galleryImageCloseupSource = "";
	private void ShowGalleryImageCloseup(string setSource) {
		galleryImageCloseupSource = setSource;
		galleryImageCloseupVisible = true;
	}
}