@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<PageTitle>Sammy Mahmoudi</PageTitle>

<Layout>
	<Div Background="Background.Primary">
		@*Header*@
		<LayoutHeader Padding="Padding.Is2" TextColor="TextColor.Primary">

			<Row Margin="Margin.Is0">
				<Column ColumnSize="ColumnSize.Is2" />
				<Column ColumnSize="ColumnSize.Is8">
					<Heading Size="HeadingSize.Is1" TextAlignment="TextAlignment.Center">Sammy Mahmoudi</Heading>
				</Column>
				<Column ColumnSize="ColumnSize.Is2">
					<Container Margin="Margin.Is2" Padding="Padding.Is2">
						@*Dark Mode Switch*@
						<Switch VerticalAlignment="VerticalAlignment.Bottom" TValue="bool" Checked="GlobalVariables.DarkModeActive" CheckedChanged="@ToggleDarkMode">🌙</Switch>
					</Container>
				</Column>
			</Row>
			<Heading Size="HeadingSize.Is3" TextAlignment="TextAlignment.Center">Programming & Games Portfolio</Heading>
		</LayoutHeader>

		@*Tabs*@
		<Container TextAlignment="TextAlignment.Center">
			<NavMenu />
		</Container>
	</Div>

	@*Body*@
	<LayoutContent>
		<div class="@GetCurPageClassName()">
			<Container Padding="Padding.Is3">
				@Body
			</Container>
		</div>
	</LayoutContent>

	@*Fill empty space with background color*@
	<div class="@GetCurPageClassName()" style="display: flex; flex-flow: column; height: 100%" />

	@*Footer*@
	<div class="@GetCurPageClassName()">
		<LayoutFooter>
			<Container TextAlignment="TextAlignment.Center">
				<Paragraph Padding="Padding.Is2">
					Website created by Sammy Mahmoudi in Microsoft Blazor. Using Blazorise UI components. Hosted with GitHub Pages. 🥯
				</Paragraph>
			</Container>
		</LayoutFooter>
	</div>
</Layout>

@code {
	protected override async Task OnInitializedAsync() {
		await DetectBrowserDarkModeAndSetAppDarkMode();
	}

	//Navigation
	public string GetCurPageClassName() {
		SetUpNavigationManagerIfNotSetUp();

		string currentUrl = NavigationManager.Uri;
		if (GlobalVariables.DarkModeActive) {
			if (currentUrl.Contains("projects")) { return "projects-class-dark"; }
			else if (currentUrl.Contains("resume")) { return "resume-class-dark"; }
			else if (currentUrl.Contains("contact")) { return "contact-class-dark"; }
			else { return "home-class-dark"; }
		}
		else {
			if (currentUrl.Contains("projects")) { return "projects-class-light"; }
			else if (currentUrl.Contains("resume")) { return "resume-class-light"; }
			else if (currentUrl.Contains("contact")) { return "contact-class-light"; }
			else { return "home-class-light"; }
		}
	}

	//Dark Mode Slider Switch
	[CascadingParameter] Theme Theme { get; set; }
	Task ToggleDarkMode() {
		GlobalVariables.DarkModeActive = !GlobalVariables.DarkModeActive;
		RefreshDarkModeState();

		return Task.CompletedTask;
	}
	public void RefreshDarkModeState() {
		bool temp = GlobalVariables.DarkModeActive;

		Theme newTheme = GlobalVariables.CurTheme;
		Theme.TextColorOptions.Primary = newTheme.TextColorOptions.Primary;
		Theme.ColorOptions.Primary = newTheme.ColorOptions.Primary;
		Theme.ColorOptions.Secondary = newTheme.ColorOptions.Secondary;
		Theme.ColorOptions.Light = newTheme.ColorOptions.Light;
		Theme.ColorOptions.Info = newTheme.ColorOptions.Info;
		Theme.BackgroundOptions.Primary = newTheme.BackgroundOptions.Primary;
		Theme.ThemeHasChanged();

		GlobalVariables.OnDarkModeToggled?.Invoke();
	}

	//Dark Mode Auto-Set
	private async Task DetectBrowserDarkModeAndSetAppDarkMode() {
		bool isBrowserInDarkMode = await JS.InvokeAsync<bool>("getBrowserDarkMode");

		if (GlobalVariables.DarkModeActive != isBrowserInDarkMode) {
			GlobalVariables.DarkModeActive = isBrowserInDarkMode;
			RefreshDarkModeState();
		}
	}

	#region Helpers
	bool doneSettingUpNavigationManager = false;
	private void SetUpNavigationManagerIfNotSetUp() {
		if (!doneSettingUpNavigationManager) {
			NavigationManager.LocationChanged += (obj, lcea) => {
				GlobalVariables.OnPageJump?.Invoke();
			};

			doneSettingUpNavigationManager = true;
		}
	}
	#endregion
}