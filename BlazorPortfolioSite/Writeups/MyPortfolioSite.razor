@page "/projects/myportfoliosite"
@using Blazor_Portfolio_Site.Components
@inherits PageBase

<Animate Auto Animation="Animations.FadeIn">
	<Container Padding="Padding.Is2">
		<BackToProjectsButton />

		<Card Margin="Margin.Is2">
			<Container>
				@*Header*@
				<Container Width="Width.Is100" TextAlignment="TextAlignment.Center" Padding="Padding.Is2">
					<Image src="portfolioimages/myportfoliosite/header.png" Width="Width.Is50" Padding="Padding.Is2" />
					<Heading Size="HeadingSize.Is2">
						My Portfolio Site
					</Heading>
					<Heading Size="HeadingSize.Is5">
						Custom Portfolio Site Created Using MS Blazor, C#, and ASP.NET
					</Heading>
				</Container>

				<Divider />

				@*About*@
				<Heading Size="HeadingSize.Is3" Padding="Padding.Is2" TextAlignment="TextAlignment.Center">About</Heading>
				<Row Margin="Margin.Is2">
					<Column ColumnSize="ColumnSize.Is8">
						<Paragraph>
							I decided to create this portfolio site as a motivator to learn Microsoft Blazor!
						</Paragraph>
						<Paragraph>
							I’m very happy with how it turned out. It came out much nicer than my previous website (made using a website builder service) and I'm proud to have programmed all of it this time.
						</Paragraph>
					</Column>
					<Column ColumnSize="ColumnSize.Is4">
						<Text>Source: <Text TextWeight="TextWeight.Bold">Open Source</Text></Text> <br />
						<Text>Date: <Text TextWeight="TextWeight.Bold">Ongoing</Text></Text> <br />
						<Text>Team Size: <Text TextWeight="TextWeight.Bold">Solo</Text></Text> <br />
						<Text>Languages and Technologies: <Text TextWeight="TextWeight.Bold">Blazor, C#, ASP.NET, Visual Studio, Git</Text></Text> <br />

						<Link To="https://github.com/BagelMaster5000/Blazor-Portfolio-Site" Target="Target.Blank">
						<Div class="clicky-card-link">
							<Card Margin="Margin.Is2" class="outlined-card">
								<CardBody>
									<Row>
										<Column ColumnSize="ColumnSize.Is2">
											<img style="filter:invert(@GlobalVariables.DarkModeColorInvertPercent)" src="icons/github.png" height="30px" width="30px" />
										</Column>
										<Column ColumnSize="ColumnSize.Is10">
											<Text TextWeight="TextWeight.Bold" VerticalAlignment="VerticalAlignment.Middle">Github!</Text>
										</Column>
									</Row>
								</CardBody>
							</Card>
						</Div>
						</Link>
					</Column>
				</Row>

				<Divider />

				@*Using Blazor*@
				<Heading Size="HeadingSize.Is3" Padding="Padding.Is2" TextAlignment="TextAlignment.Center">Using Blazor</Heading>
				<Row Margin="Margin.Is2">
					<Container TextAlignment="TextAlignment.Center">
						<Figure Width="Width.Is50">
							<FigureImage Source="portfolioimages/myportfoliosite/blazor.png" Rounded />
						</Figure>
					</Container>
					<Paragraph>
						Microsoft Blazor has been very fun to learn! For those that don’t know, the quirk with the Blazor web framework is that all of the logic programming can be written in C# and executed natively on the .NET runtime. As someone who doesn’t particularly enjoy javascript programming and has a lot of experience with C# development, I love it!
					</Paragraph>
					<Paragraph>
						Because of how new Blazor is, there aren’t many resources online like forum posts or how-to articles. For the most part, I was stuck with Microsoft’s and Blazorise’s documentation. This made debugging niche issues very annoying. Luckily, Blazor does also support javascript logic programming as a fallback. Meaning, for difficult issues it’s possible to ignore C# and .NET entirely and solve your problems using the plentiful online javascript resources.
					</Paragraph>
				</Row>

				<Divider />

				@*Animations*@
				<Heading Size="HeadingSize.Is3" Padding="Padding.Is2" TextAlignment="TextAlignment.Center">Animations</Heading>
				<Row Margin="Margin.Is2">
					<Paragraph>
						I utilized animations from the Blazorise UI component library across my entire site.
					</Paragraph>
					<Row>
						<Column ColumnSize="ColumnSize.Is5" TextAlignment="TextAlignment.Center">
							<Figure>
								<FigureImage Source="portfolioimages/myportfoliosite/buttonanimation.gif" Rounded />
								<FigureCaption>
									Animation for buttons.
								</FigureCaption>
							</Figure>
						</Column>
						<Column ColumnSize="ColumnSize.Is7" TextAlignment="TextAlignment.Center">
							<Figure>
								<FigureImage Source="portfolioimages/myportfoliosite/pageanimation.gif" Rounded />
								<FigureCaption>
									Animation for page switching.
								</FigureCaption>
							</Figure>
						</Column>
					</Row>
					<Paragraph>
						If you’ve noticed, the page switching animation in my site is directional. The page will do a “slide left” or a “slide right” animation depending on which direction left/right the destination tab is from the current tab.
					</Paragraph>
					<Container TextAlignment="TextAlignment.Center">
						<Figure Width="Width.Is75">
							<FigureImage Source="portfolioimages/myportfoliosite/animationdirections.jpg" Rounded />
							<FigureCaption>
								When a page tab is clicked, a function is called that will set the direction of the animation based on what page the user is currently on.
							</FigureCaption>
						</Figure>
					</Container>
				</Row>

				<Divider />

				@*Dark Mode*@
				<Heading Size="HeadingSize.Is3" Padding="Padding.Is2" TextAlignment="TextAlignment.Center">Dark Mode</Heading>
				<Row Margin="Margin.Is2">
					<Container TextAlignment="TextAlignment.Center">
						<Figure Width="Width.Is75">
							<FigureImage Source="portfolioimages/myportfoliosite/darkmode.gif" Rounded />
							<FigureCaption>
								I created custom themes for the light and dark modes and utilized Blazorise's built-in theme switching system to allow toggling dark mode at runtime.
							</FigureCaption>
						</Figure>
					</Container>
					<Paragraph>
						I wanted the dark mode state of the website to be auto-set using the browser’s dark mode state on-page-load (light mode users see the light mode site by default, dark mode users see the dark mode site by default). This issue was unsolvable using C# and ASP.NET, but luckily I was able to solve it by implementing a small javascript function to detect the browser’s dark mode state and call it from a C# startup method.
					</Paragraph>
					<Paragraph>
						I also ran into an issue that some Blazorise components—such as Cards and List Groups—weren't affected at all by theme-switching for some reason. For those components I had to manually adjust their css properties to sync correctly with the current theme.
					</Paragraph>
					<Container TextAlignment="TextAlignment.Center">
						<Figure Width="Width.Is75">
							<FigureImage Source="portfolioimages/myportfoliosite/pageanimation.gif" Rounded />
							<FigureCaption>
								The page tabs required some additional funcionality to account for dark mode switching. This is because they color-match with their respective page backgrounds and each page has a unique color that is also affected by dark mode state.
							</FigureCaption>
						</Figure>
					</Container>
				</Row>

				<Divider />

                @*Build Automation*@
                <Heading Size="HeadingSize.Is3" Padding="Padding.Is2" TextAlignment="TextAlignment.Center">Build Automation</Heading>
                <Row Margin="Margin.Is2">
                    <Container TextAlignment="TextAlignment.Center" Padding="Padding.Is2">
                        <Figure Width="Width.Is75">
                            <FigureImage Source="portfolioimages/myportfoliosite/buildautomation.png" Rounded />
                            <FigureCaption>
                                I used GitHub Actions for build automation!
                            </FigureCaption>
                        </Figure>
                    </Container>
                    <Paragraph>
                        This was slightly complicated to get working. I assumed for some time that build automation wouldn’t be possible for my portfolio site because Microsoft Blazor requires sites be built using the .NET "publish" command (the website is a .NET project, rather than a static html page like a lot of sites). But, I learned you actually can use .NET build tools in a GitHub action file if you import them!
                    </Paragraph>
                    <Paragraph>
                        So, I followed some online resources and created a workflow script to automatically build and deploy my site on push to main. I also moved site hosting to GitHub pages for simplicity of the script.
                    </Paragraph>
                     <h6>Workflow</h6>
                    <ListGroup>
                        <ListGroupItem>
                            1.	Setup .NET 7.0.
                        </ListGroupItem>
                        <ListGroupItem>
                            2.	Run dotnet publish to build the site.
                        </ListGroupItem>
                        <ListGroupItem>
                            3.	Upload built project as an artifact.
                        </ListGroupItem>
                        <ListGroupItem>
                            4.	Deploy artifact to GitHub pages as a viewable web site!
                        </ListGroupItem>
                    </ListGroup>
                </Row>
			</Container>
		</Card>

		<BackToProjectsButton />
	</Container>
</Animate>